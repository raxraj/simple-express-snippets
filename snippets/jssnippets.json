{
	"Express simple server Setup": {
		"scope": "javascript",
		"prefix": "ess",
		"body": [
			"const express = require('express')",
			"",
			"const ${1:app} = express()",
			"",
			"${1:app}.listen(${2:3000}, () => {\n\tconsole.log(`Server is Listening on ${2:3000}`)\n})"
		],
		"description": "Setup a simple Express Server"
	},
	"Express complete server setup": {
		"scope": "javascript",
		"prefix": "essfull",
		"body": [
			"const express = require('express')",
			"const cors = require('cors')",
			"const helmet = require('helmet')",
			"const morgan = require('morgan')",
			"",
			"const ${1:app} = express()",
			"const PORT = process.env.PORT || ${2:3000}",
			"",
			"// Security middleware",
			"${1:app}.use(helmet())",
			"${1:app}.use(cors())",
			"",
			"// Logging middleware",
			"${1:app}.use(morgan('combined'))",
			"",
			"// Body parsing middleware",
			"${1:app}.use(express.json())",
			"${1:app}.use(express.urlencoded({ extended: true }))",
			"",
			"// Static files",
			"${1:app}.use(express.static('public'))",
			"",
			"// Routes",
			"${1:app}.get('/', (req, res) => {",
			"\tres.json({ message: 'Server is running!' })",
			"})",
			"",
			"// Error handling middleware",
			"${1:app}.use((err, req, res, next) => {",
			"\tconsole.error(err.stack)",
			"\tres.status(500).json({ error: 'Something went wrong!' })",
			"})",
			"",
			"${1:app}.listen(PORT, () => {",
			"\tconsole.log(`Server is running on port $${PORT}`)",
			"})"
		],
		"description": "Complete Express server setup with middleware"
	},
	"Express URL encoded": {
		"scope": "javascript",
		"prefix": "eue",
		"body": "${1:app}.use(express.urlencoded({ extended: false }));",
		"description": "Use URL Encoded in Express."
	},
	"Express set to use json": {
		"scope": "javascript",
		"prefix": "ejson",
		"body": "${1:app}.use(express.json())",
		"description": "Set Express to use json parsing for request.body"
	},
	"Express set the static folder": {
		"scope": "javascript",
		"prefix": "estatic",
		"body": "${1:app}.use(express.static('${2:public}'))",
		"description": "Set Express to use given folder name as static"
	},
	"Express simple router": {
		"scope": "javascript",
		"prefix": "esrouter",
		"body": [
			"const express = require('express')",
			"const router = express.Router()",
			"$0",
			"module.exports = router"
		],
		"description": "Create a simple router object."
	},
	"Express router get request": {
		"scope": "javascript, typescript",
		"prefix": "ergr",
		"body": "router.get('${1:/:id}', (req, res) => {\n\t$0\n})",
		"description": "A router based get route"
	},
	"Express router post request": {
		"scope": "javascript, typescript",
		"prefix": "erpr",
		"body": "router.post('${1:/}', (req, res) => {\n\t$0\n})",
		"description": "A router based post route"
	},
	"Express router put request": {
		"scope": "javascript",
		"prefix": "erput",
		"body": "router.put('${1:/:id}', (req, res) => {\n\t$0\n})",
		"description": "A router based put route"
	},
	"Express router delete request": {
		"scope": "javascript",
		"prefix": "erdel",
		"body": "router.delete('${1:/:id}', (req, res) => {\n\t$0\n})",
		"description": "A router based delete route"
	},
	"Express router patch request": {
		"scope": "javascript",
		"prefix": "erpatch",
		"body": "router.patch('${1:/:id}', (req, res) => {\n\t$0\n})",
		"description": "A router based patch route"
	},
	"Express simple get request": {
		"scope": "javascript",
		"prefix": "esgr",
		"body": "${1:app}.get('/${2:route}', (req, res) => {\n\t$0\n})",
		"description": "A simple get route for Express"
	},
	"Express simple Post request": {
		"scope": "javascript",
		"prefix": "espr",
		"body": "${1:app}.post('/${2:route}', (req, res) => {\n\t$0\n})",
		"description": "A simple post route for Express"
	},
	"Express simple put request": {
		"scope": "javascript",
		"prefix": "esput",
		"body": "${1:app}.put('/${2:route}', (req, res) => {\n\t$0\n})",
		"description": "A simple put route for Express"
	},
	"Express simple delete request": {
		"scope": "javascript",
		"prefix": "esdel",
		"body": "${1:app}.delete('/${2:route}', (req, res) => {\n\t$0\n})",
		"description": "A simple delete route for Express"
	},
	"Express simple patch request": {
		"scope": "javascript",
		"prefix": "espatch",
		"body": "${1:app}.patch('/${2:route}', (req, res) => {\n\t$0\n})",
		"description": "A simple patch route for Express"
	},
	"Express middleware function": {
		"scope": "javascript",
		"prefix": "emiddleware",
		"body": [
			"const ${1:middlewareName} = (req, res, next) => {",
			"\t$0",
			"\tnext()",
			"}"
		],
		"description": "Create Express middleware function"
	},
	"Express async middleware": {
		"scope": "javascript",
		"prefix": "easyncmw",
		"body": [
			"const ${1:asyncMiddleware} = async (req, res, next) => {",
			"\ttry {",
			"\t\t$0",
			"\t\tnext()",
			"\t} catch (error) {",
			"\t\tnext(error)",
			"\t}",
			"}"
		],
		"description": "Create async Express middleware function"
	},
	"Express error handler": {
		"scope": "javascript",
		"prefix": "eerror",
		"body": [
			"${1:app}.use((err, req, res, next) => {",
			"\tconsole.error(err.stack)",
			"\tres.status(${2:500}).json({",
			"\t\terror: '${3:Internal Server Error}',",
			"\t\tmessage: err.message",
			"\t})",
			"})"
		],
		"description": "Express error handling middleware"
	},
	"Express 404 handler": {
		"scope": "javascript",
		"prefix": "e404",
		"body": [
			"${1:app}.use('*', (req, res) => {",
			"\tres.status(404).json({",
			"\t\terror: 'Route not found',",
			"\t\tpath: req.originalUrl",
			"\t})",
			"})"
		],
		"description": "Express 404 error handler"
	},
	"Express CORS setup": {
		"scope": "javascript",
		"prefix": "ecors",
		"body": [
			"const cors = require('cors')",
			"",
			"const corsOptions = {",
			"\torigin: ['${1:http://localhost:3000}'],",
			"\tcredentials: true,",
			"\toptionsSuccessStatus: 200",
			"}",
			"",
			"${2:app}.use(cors(corsOptions))"
		],
		"description": "Express CORS configuration"
	},
	"Express rate limiting": {
		"scope": "javascript",
		"prefix": "eratelimit",
		"body": [
			"const rateLimit = require('express-rate-limit')",
			"",
			"const limiter = rateLimit({",
			"\twindowMs: ${1:15} * 60 * 1000, // ${1:15} minutes",
			"\tmax: ${2:100}, // limit each IP to ${2:100} requests per windowMs",
			"\tmessage: '${3:Too many requests from this IP}'",
			"})",
			"",
			"${4:app}.use(limiter)"
		],
		"description": "Express rate limiting setup"
	},
	"Express session setup": {
		"scope": "javascript",
		"prefix": "esession",
		"body": [
			"const session = require('express-session')",
			"",
			"${1:app}.use(session({",
			"\tsecret: '${2:your-secret-key}',",
			"\tresave: false,",
			"\tsaveUninitialized: false,",
			"\tcookie: {",
			"\t\tsecure: ${3:false}, // set to true if using https",
			"\t\tmaxAge: ${4:24} * 60 * 60 * 1000 // ${4:24} hours",
			"\t}",
			"}))"
		],
		"description": "Express session configuration"
	},
	"Express cookie parser": {
		"scope": "javascript",
		"prefix": "ecookie",
		"body": [
			"const cookieParser = require('cookie-parser')",
			"",
			"${1:app}.use(cookieParser('${2:your-secret}'))"
		],
		"description": "Express cookie parser setup"
	},
	"Express helmet security": {
		"scope": "javascript",
		"prefix": "ehelmet",
		"body": [
			"const helmet = require('helmet')",
			"",
			"${1:app}.use(helmet({",
			"\tcontentSecurityPolicy: {",
			"\t\tdirectives: {",
			"\t\t\tdefaultSrc: [\"'self'\"],",
			"\t\t\tstyleSrc: [\"'self'\", \"'unsafe-inline'\"]",
			"\t\t}",
			"\t}",
			"}))"
		],
		"description": "Express Helmet security middleware"
	},
	"Express morgan logging": {
		"scope": "javascript",
		"prefix": "emorgan",
		"body": [
			"const morgan = require('morgan')",
			"",
			"${1:app}.use(morgan('${2:combined}'))"
		],
		"description": "Express Morgan logging middleware"
	},
	"Express JWT middleware": {
		"scope": "javascript",
		"prefix": "ejwt",
		"body": [
			"const jwt = require('jsonwebtoken')",
			"",
			"const authenticateToken = (req, res, next) => {",
			"\tconst authHeader = req.headers['authorization']",
			"\tconst token = authHeader && authHeader.split(' ')[1]",
			"",
			"\tif (!token) {",
			"\t\treturn res.status(401).json({ error: 'Access token required' })",
			"\t}",
			"",
			"\tjwt.verify(token, process.env.JWT_SECRET, (err, user) => {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(403).json({ error: 'Invalid token' })",
			"\t\t}",
			"\t\treq.user = user",
			"\t\tnext()",
			"\t})",
			"}"
		],
		"description": "Express JWT authentication middleware"
	},
	"Express JWT generate token": {
		"scope": "javascript",
		"prefix": "ejwtgen",
		"body": [
			"const jwt = require('jsonwebtoken')",
			"",
			"const generateToken = (payload) => {",
			"\treturn jwt.sign(payload, process.env.JWT_SECRET, {",
			"\t\texpiresIn: '${1:24h}'",
			"\t})",
			"}"
		],
		"description": "Generate JWT token function"
	},
	"Express validation middleware": {
		"scope": "javascript",
		"prefix": "evalidate",
		"body": [
			"const { body, validationResult } = require('express-validator')",
			"",
			"const validate = [",
			"\tbody('${1:field}').notEmpty().withMessage('${1:Field} is required'),",
			"\tbody('${2:email}').isEmail().withMessage('Valid email is required'),",
			"\t(req, res, next) => {",
			"\t\tconst errors = validationResult(req)",
			"\t\tif (!errors.isEmpty()) {",
			"\t\t\treturn res.status(400).json({ errors: errors.array() })",
			"\t\t}",
			"\t\tnext()",
			"\t}",
			"]"
		],
		"description": "Express validation middleware with express-validator"
	},
	"Express async route handler": {
		"scope": "javascript",
		"prefix": "easync",
		"body": [
			"${1:app}.${2:get}('/${3:route}', async (req, res, next) => {",
			"\ttry {",
			"\t\t$0",
			"\t\tres.json({ success: true })",
			"\t} catch (error) {",
			"\t\tnext(error)",
			"\t}",
			"})"
		],
		"description": "Express async route handler with error handling"
	},
	"Express response JSON": {
		"scope": "javascript",
		"prefix": "eresj",
		"body": "res.status(${1:200}).json({ ${2:message: 'Success'} })",
		"description": "Express JSON response"
	},
	"Express response with status": {
		"scope": "javascript",
		"prefix": "eresstat",
		"body": "res.status(${1:200}).send('${2:OK}')",
		"description": "Express response with status"
	},
	"Express redirect": {
		"scope": "javascript",
		"prefix": "eredirect",
		"body": "res.redirect(${1:301}, '${2:/new-path}')",
		"description": "Express redirect response"
	},
	"Express file upload setup": {
		"scope": "javascript",
		"prefix": "efileupload",
		"body": [
			"const multer = require('multer')",
			"",
			"const storage = multer.diskStorage({",
			"\tdestination: (req, file, cb) => {",
			"\t\tcb(null, '${1:uploads/}')",
			"\t},",
			"\tfilename: (req, file, cb) => {",
			"\t\tcb(null, Date.now() + '-' + file.originalname)",
			"\t}",
			"})",
			"",
			"const upload = multer({ storage })"
		],
		"description": "Express file upload with Multer"
	},
	"Express database connection": {
		"scope": "javascript",
		"prefix": "edbconnect",
		"body": [
			"const mongoose = require('mongoose')",
			"",
			"const connectDB = async () => {",
			"\ttry {",
			"\t\tawait mongoose.connect(process.env.MONGODB_URI, {",
			"\t\t\tuseNewUrlParser: true,",
			"\t\t\tuseUnifiedTopology: true",
			"\t\t})",
			"\t\tconsole.log('MongoDB connected successfully')",
			"\t} catch (error) {",
			"\t\tconsole.error('Database connection failed:', error)",
			"\t\tprocess.exit(1)",
			"\t}",
			"}",
			"",
			"connectDB()"
		],
		"description": "Express MongoDB connection setup"
	},
	"Express route with params": {
		"scope": "javascript",
		"prefix": "eparams",
		"body": [
			"${1:app}.get('/${2:users}/:${3:id}', (req, res) => {",
			"\tconst { ${3:id} } = req.params",
			"\t$0",
			"\tres.json({ ${3:id} })",
			"})"
		],
		"description": "Express route with parameters"
	},
	"Express route with query": {
		"scope": "javascript",
		"prefix": "equery",
		"body": [
			"${1:app}.get('/${2:search}', (req, res) => {",
			"\tconst { ${3:q}, ${4:limit} = 10 } = req.query",
			"\t$0",
			"\tres.json({ query: ${3:q}, limit: ${4:limit} })",
			"})"
		],
		"description": "Express route with query parameters"
	},
	"Express test setup": {
		"scope": "javascript",
		"prefix": "etest",
		"body": [
			"const request = require('supertest')",
			"const app = require('../app')",
			"",
			"describe('${1:API Tests}', () => {",
			"\ttest('${2:GET /}', async () => {",
			"\t\tconst response = await request(app)",
			"\t\t\t.get('${3:/}')",
			"\t\t\t.expect(${4:200})",
			"\t\t",
			"\t\texpect(response.body).toHaveProperty('${5:message}')",
			"\t})",
			"})"
		],
		"description": "Express test setup with Jest and Supertest"
	},
	"Express controller function": {
		"scope": "javascript",
		"prefix": "econtroller",
		"body": [
			"const ${1:controllerName} = {",
			"\t${2:getAll}: async (req, res, next) => {",
			"\t\ttry {",
			"\t\t\t$0",
			"\t\t\tres.json({ success: true, data: [] })",
			"\t\t} catch (error) {",
			"\t\t\tnext(error)",
			"\t\t}",
			"\t},",
			"",
			"\t${3:getById}: async (req, res, next) => {",
			"\t\ttry {",
			"\t\t\tconst { id } = req.params",
			"\t\t\tres.json({ success: true, data: { id } })",
			"\t\t} catch (error) {",
			"\t\t\tnext(error)",
			"\t\t}",
			"\t}",
			"}",
			"",
			"module.exports = ${1:controllerName}"
		],
		"description": "Express controller with multiple methods"
	}
}